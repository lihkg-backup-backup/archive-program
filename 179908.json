{"tid":179908,"cid":26,"subCid":0,"title":"我都唔太識分Partial Application同Currying...","createTime":"2017-03-30T14:22:20.000Z","updateTime":"2017-03-31T17:56:50.000Z","uid":33883,"like":0,"dislike":0,"uniUserReply":0,"replies":[{"pid":"8c46fd4afd6a1f8acce02104788e98216bae9910","tid":179908,"uid":33883,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-30T14:22:20.000Z","msg":"Google過好多網, 但個L個都講到超複雜! <img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <br />\n我而家簡單咁如下咁分(用JS做例子), 唔知啱唔啱? <img src=\"/assets/faces/lomoji/26.png\" class=\"hkgmoji\" /> <br />\n<br />\n<img src=\"https://img.eservice-hk.net/upload/2017/03/30/221734_0526054bc9e34be2b9f5ed419b75f527.jpg\" data-thumbnail-src=\"https://i.lih.kg/thumbnail?u=https%3A%2F%2Fimg.eservice-hk.net%2Fupload%2F2017%2F03%2F30%2F221734_0526054bc9e34be2b9f5ed419b75f527.jpg&h=863b73c7&s={SIZE}\" /><br />\n<br />\n<img src=\"https://img.eservice-hk.net/upload/2017/03/30/221837_bc376e4a44723e42ecddecb958813b56.jpg\" data-thumbnail-src=\"https://i.lih.kg/thumbnail?u=https%3A%2F%2Fimg.eservice-hk.net%2Fupload%2F2017%2F03%2F30%2F221837_bc376e4a44723e42ecddecb958813b56.jpg&h=e8f3d4af&s={SIZE}\" /><br />\n<br />\nAnyway, 其實Ramda(also Lodash)個Auto Curry function似乎都包晒Partial Application同Currying, 好好用, 唔駛自己咁煩另外再定義多個, DRY principle嘛! <img src=\"/assets/faces/normal/good.gif\" class=\"hkgmoji\" />"},{"pid":"68a270688c7e5357d0191f354e33c073f01c1458","tid":179908,"uid":79869,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T01:25:58.000Z","msg":"整curry時，內部會predefined左部份parameter<br />\n而你既例子係替template寫定add<br />\n<br />\n<br />\ntemplate形式似係map, reduce, filter既架構<br />\n利申： 吹水mode on"},{"pid":"1ba5bc4c05f3343c3f6de2d963c5884dcb594c0a","tid":179908,"uid":79869,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T01:56:58.000Z","msg":"<blockquote>整curry時，內部會predefined左部份parameter<br />\n而你既例子係替template寫定add<br />\n<br />\n<br />\n<del>template形式似係map, reduce, filter既架構</del><br />\n利申： 吹水mode on</blockquote><br />\n原來猜錯<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <br />\n<a href=\"http://ranwu.me/fp/2015/08/02/currying-and-partial-application.html\" data-sr-url=\"https://r.lihkg.com/link?u=http%3A%2F%2Franwu.me%2Ffp%2F2015%2F08%2F02%2Fcurrying-and-partial-application.html&d=TEMpI0ru4fZij%2BnpPgfFHfM6KyiA14vjm6WlJCMZo68%3D&h=604429f2\" target=\"_blank\">http://ranwu.me/fp/2015/08/02/currying-and-partial-application.html</a>"},{"pid":"85d7f2f6e1a176979f7400e0a3c652a7b1e8d2ed","tid":179908,"uid":79869,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T02:05:34.000Z","msg":"In the simply-typed lambda calculus with function and product types (&lambda;&rarr;,&times;) partial application, currying and uncurrying can be defined as:<br />\n<br />\npapply  : (((a &times; b) &rarr; c) &times; a) &rarr; <span style=\"color: red;\">(b &rarr; c) </span>= &lambda;(f, x). &lambda;y. f (x, y)<br />\ncurry   : ((a &times; b) &rarr; c) &rarr; <span style=\"color: red;\">(a &rarr; (b &rarr; c))</span> = &lambda;f. &lambda;x. &lambda;y. f (x, y)<br />\nuncurry : (a &rarr; (b &rarr; c)) &rarr; ((a &times; b) &rarr; c) = &lambda;f. &lambda;(x, y). f x y<br />\n<br />\n<a href=\"https://en.wikipedia.org/wiki/Partial_application#Definitions\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FPartial_application%23Definitions&d=TEMpI0ru4fZij%2BnpPgfFHfM6KyiA14vjm6WlJCMZo68%3D&h=e7f83c1c\" target=\"_blank\">https://en.wikipedia.org/wiki/Partial_application#Definitions</a><br />\n<br />\n<br />\n生成既產物, 係最終execute一刻會有點唔同"},{"pid":"5ab5652c9a3efad2f7df1614c878e54c76aab7d5","tid":179908,"uid":1573,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T03:10:58.000Z","msg":"<a href=\"https://medium.com/@adambene/currying-in-javascript-es6-540d2ad09400\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fmedium.com%2F%40adambene%2Fcurrying-in-javascript-es6-540d2ad09400&d=TEMpI0ru4fZij%2BnpPgfFHfM6KyiA14vjm6WlJCMZo68%3D&h=b7c9d600\" target=\"_blank\">https://medium.com/@adambene/currying-in-javascript-es6-540d2ad09400</a><br />\n睇下會唔會幫到你"},{"pid":"0fb0c10e8e2ae59a686f52606f2756257e4d3fbc","tid":179908,"uid":33883,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T04:00:44.000Z","msg":"<blockquote><a href=\"https://medium.com/@adambene/currying-in-javascript-es6-540d2ad09400\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fmedium.com%2F%40adambene%2Fcurrying-in-javascript-es6-540d2ad09400&d=TEMpI0ru4fZij%2BnpPgfFHfM6KyiA14vjm6WlJCMZo68%3D&h=b7c9d600\" target=\"_blank\">https://medium.com/@adambene/currying-in-javascript-es6-540d2ad09400</a><br />\n睇下會唔會幫到你</blockquote><br />\n<br />\nExcellent, the binary function &quot;multiply(n, m)&quot; is easily seen to be converted into a combination of urnary functions &quot;curryedMultiply(n)(m)&quot; . That tallies exactly with the definition of Currying! <img src=\"/assets/faces/normal/good.gif\" class=\"hkgmoji\" />"},{"pid":"1e1cde80f5cbb76364f01d437f68a816025d7f1d","tid":179908,"uid":33883,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T04:26:43.000Z","msg":"<blockquote>In the simply-typed lambda calculus with function and product types (&lambda;&rarr;,&times;) partial application, currying and uncurrying can be defined as:<br />\n<br />\npapply  : (((a &times; b) &rarr; c) &times; a) &rarr; <span style=\"color: red;\">(b &rarr; c) </span>= &lambda;(f, x). &lambda;y. f (x, y)<br />\ncurry   : ((a &times; b) &rarr; c) &rarr; <span style=\"color: red;\">(a &rarr; (b &rarr; c))</span> = &lambda;f. &lambda;x. &lambda;y. f (x, y)<br />\nuncurry : (a &rarr; (b &rarr; c)) &rarr; ((a &times; b) &rarr; c) = &lambda;f. &lambda;(x, y). f x y<br />\n<br />\n<a href=\"https://en.wikipedia.org/wiki/Partial_application#Definitions\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FPartial_application%23Definitions&d=TEMpI0ru4fZij%2BnpPgfFHfM6KyiA14vjm6WlJCMZo68%3D&h=e7f83c1c\" target=\"_blank\">https://en.wikipedia.org/wiki/Partial_application#Definitions</a><br />\n<br />\n<br />\n生成既產物, 係最終execute一刻會有點唔同</blockquote><br />\n<br />\n老老實實, 網上面就係個L個都用lambda-calculus(依個concept仲深, 一定識架咩?!)嚟分papply同curry, 先攪到我覺得超confused&hellip; <img src=\"/assets/faces/normal/banghead.gif\" class=\"hkgmoji\" /><img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" />"},{"pid":"08fbe13c0fb47c9ef8ba6fd81baa5a0cb18eb5cc","tid":179908,"uid":33883,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T04:51:49.000Z","msg":"補充多少少, 正如學Imperative Programming同OOP既重要concepts時唔一定要識Turing Machine, 學Functional Programming時冇奶油一定要曉lambda-calculus架姐, 係咪?<br />\n<br />\n我覺得要分別papply同curry呢兩個基本FL concepts, 應該唔需要用到lambda-calculus咁深姐! <img src=\"/assets/faces/normal/frown.gif\" class=\"hkgmoji\" />"},{"pid":"11bb1cdff7237ba1ccc820e9ce7359e349281b42","tid":179908,"uid":33883,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T15:01:08.000Z","msg":"總結一下:<br />\n<br />\n<img src=\"https://img.eservice-hk.net/upload/2017/03/31/224940_cfcf4602ebc49355c4be2180aff5ec59.jpg\" data-thumbnail-src=\"https://i.lih.kg/thumbnail?u=https%3A%2F%2Fimg.eservice-hk.net%2Fupload%2F2017%2F03%2F31%2F224940_cfcf4602ebc49355c4be2180aff5ec59.jpg&h=aa27af6e&s={SIZE}\" /><br />\n<br />\n我決定咁: 都係好似大部分人一樣, 當係同一樣野算數, 反正真係要做papply/currying時都一係import定個Ramda/Lodash library, 或者借用下bind function嚟過橋, 無需太著意去分別佢地! <img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" />"},{"pid":"55e48e6617be1a7aad99ff08120ca2720c6a58d7","tid":179908,"uid":23699,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T17:27:05.000Z","msg":"我覺得係個subject唔同<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <br />\npartial 只係講緊個function bind （記低） 某個variable <br />\n<br />\ncurrying 講緊個process 點去接受N 個para<br />\n就係每次return bind一個variable既 partial<br />\n再用個partial ，return bind多個varibale既partial<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" />"},{"pid":"ace19632b1556fe990c8f7dd0909342f4980dbe7","tid":179908,"uid":23699,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T17:34:04.000Z","msg":"btw估唔到你用xp<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" />"},{"pid":"e19b9b152f7ea45e9dd433cd66b66c93768ef697","tid":179908,"uid":33883,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T17:49:58.000Z","msg":"<blockquote>我覺得係個subject唔同<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <br />\npartial 只係講緊個function bind （記低） 某個variable <br />\n<br />\ncurrying 講緊個process 點去接受N 個para<br />\n就係每次return bind一個variable既 partial<br />\n再用個partial ，return bind多個varibale既partial<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /> <img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /></blockquote><br />\n<br />\n我完全知你講乜, 但其他人可能覺得你講到1999, ha! <img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" />"},{"pid":"13b1cd26bdea5b0d3fda20e099702c9b7d511571","tid":179908,"uid":33883,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-03-31T17:56:50.000Z","msg":"<blockquote>btw估唔到你用xp<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /></blockquote><br />\n<br />\nxp又點, 部機未壞, 我咪繼續用囉! <img src=\"/assets/faces/normal/biggrin.gif\" class=\"hkgmoji\" />  <br />\n(P.S. 家中PC/Notebook/Mac/Linux/NAS加埋有成十幾廿部, 平時就係用xp呢部, 亦係最廢嗰部!)"}]}