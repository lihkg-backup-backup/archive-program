{"tid":258998,"cid":26,"subCid":0,"title":"[新手求救] python socket問題","createTime":"2017-05-26T14:36:50.000Z","updateTime":"2017-05-29T00:32:14.000Z","uid":13194,"like":0,"dislike":0,"uniUserReply":0,"replies":[{"pid":"37c283c34fca2153f897aabc706d8f4ba1bbe279","tid":258998,"uid":13194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-26T14:36:50.000Z","msg":"最近學緊python<br />\n但係好快就碰壁<br />\n所以想問問點解決<br />\n希望大家可以幫幫手<br />\n<br />\nServer:<br />\n用threading等client可以同時入嚟<br />\n等client連入嚟<br />\n之後再揀client同佢溝通<br />\n<br />\nClient:<br />\n連入server後等server出聲先再覆佢<br />\n<br />\n問題係唔識點樣揀client溝通<br />\n<br />\ngoogle睇過話要整個list 去儲存啲connection<br />\n但都唔係好明<br />\n<br />\n可能只係一個好垃圾嘅問題<img src=\"/assets/faces/normal/frown.gif\" class=\"hkgmoji\" /> <br />\n但係都希望大家可以解答我<img src=\"/assets/faces/normal/adore.gif\" class=\"hkgmoji\" />"},{"pid":"d4898526f545ca828739e2f9f7aafaf0c670f90a","tid":258998,"uid":13194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-26T15:19:25.000Z","msg":"求救<img src=\"/assets/faces/normal/frown.gif\" class=\"hkgmoji\" />"},{"pid":"fe82113fcf8a39a95aeccdb45491b1bc1a361874","tid":258998,"uid":13194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-26T17:09:37.000Z","msg":"<img src=\"/assets/faces/normal/frown.gif\" class=\"hkgmoji\" />"},{"pid":"5ee3b76c8e40a844494fba0e67617c78783a7e96","tid":258998,"uid":13194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-26T17:58:44.000Z","msg":"<img src=\"/assets/faces/normal/frown.gif\" class=\"hkgmoji\" />"},{"pid":"13b30c49f34a448686b7298c99f34eee6e691d3e","tid":258998,"uid":52194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-26T18:01:32.000Z","msg":"python<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /><img src=\"/assets/faces/normal/banghead.gif\" class=\"hkgmoji\" />"},{"pid":"05e7e1a4d9a95f0710d5bb9b4bde1dcf385ee759","tid":258998,"uid":13194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-26T18:50:57.000Z","msg":"真心求救<img src=\"/assets/faces/normal/frown.gif\" class=\"hkgmoji\" />"},{"pid":"abcf7230e58e480581f8383114317bed681810a7","tid":258998,"uid":13194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T05:34:15.000Z","msg":"<img src=\"/assets/faces/normal/frown.gif\" class=\"hkgmoji\" />"},{"pid":"3f268bfa819f86da038ac03a6710593849361e3c","tid":258998,"uid":63156,"like":1,"dislike":0,"score":1,"citedBy":0,"replyTime":"2017-05-27T08:33:42.000Z","msg":"python我唔熟<br />\n不過正常socket listen時如果有incoming connection應該會return一個client object<br />\nserver要做既就係搵一條thread不斷listen+push client入條list<br />\n之後你想一個client一個thread或者第二條thread loop client list都得"},{"pid":"3c02cd959c864160827cf6522f830a2226b6c31e","tid":258998,"uid":63156,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T08:37:05.000Z","msg":"自己搵python library reference 18.1睇下啦"},{"pid":"59b6211739db5820a9c7f2fe9359eecd6e1f5a6e","tid":258998,"uid":67527,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T11:05:17.000Z","msg":"啱啱寫完一個multi-thread C tcp socket program，唔知點用python寫。pure python應該寫唔到真multithread program，因為GIL(Global Interpreter Lock)係會lock到python bytecode唔可以同時行，只會係咁switch thread行，成件事有啲on9，基本上要python做到真multi-thread只可以用C extensions。<br />\n<br />\npython官方wiki有講<br />\n<a href=\"https://wiki.python.org/moin/GlobalInterpreterLock\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fwiki.python.org%2Fmoin%2FGlobalInterpreterLock&d=EkSOzQ7ZVjnG5t8dBASUikjIoeaDRyeQRMy%2FzT52C%2Fo%3D&h=bc091c72\" data-auto-link target=\"_blank\">https://wiki.python.org/moin/GlobalInterpreterLock</a><br />\n<br />\n另外依到有另一個解釋<br />\n<a href=\"https://stackoverflow.com/questions/20939299/does-python-support-multithreading-can-it-speed-up-execution-time\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F20939299%2Fdoes-python-support-multithreading-can-it-speed-up-execution-time&d=EkSOzQ7ZVjnG5t8dBASUikjIoeaDRyeQRMy%2FzT52C%2Fo%3D&h=21c39c06\" data-auto-link target=\"_blank\">https://stackoverflow.com/questions/20939299/does-python-support-multithreading-can-it-speed-up-execution-time</a>"},{"pid":"a4b8b3503d3625f6422db47dd1c7b866efe5238d","tid":258998,"uid":67527,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T11:07:15.000Z","msg":"<blockquote>python我唔熟<br />\n不過正常socket listen時如果有incoming connection應該會return一個client object<br />\nserver要做既就係搵一條thread不斷listen+push client入條list<br />\n之後你想一個client一個thread或者第二條thread loop client list都得</blockquote><br />\n我最近寫C係用main thread不斷listen，但係有connection就直接spawn child thread，無push入queue，到client disconnect，條thread個function就會自己end。唔知咁做啱唔啱，但係work"},{"pid":"7fd1d9e574c1aec0c3c601c5001dac91ea647a41","tid":258998,"uid":63156,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T11:59:17.000Z","msg":"<blockquote><blockquote>python我唔熟<br />\n不過正常socket listen時如果有incoming connection應該會return一個client object<br />\nserver要做既就係搵一條thread不斷listen+push client入條list<br />\n之後你想一個client一個thread或者第二條thread loop client list都得</blockquote><br />\n我最近寫C係用main thread不斷listen，但係有connection就直接spawn child thread，無push入queue，到client disconnect，條thread個function就會自己end。唔知咁做啱唔啱，但係work</blockquote><br />\n我印象中Apache係咁嘅做法<br />\n有幾條thread係咁loop client係Nginx做法<br />\n邊個好d唔敢講"},{"pid":"710bc7914e302e93645794f9baa59e2acb56f0db","tid":258998,"uid":63156,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T12:00:18.000Z","msg":"<blockquote>啱啱寫完一個multi-thread C tcp socket program，唔知點用python寫。pure python應該寫唔到真multithread program，因為GIL(Global Interpreter Lock)係會lock到python bytecode唔可以同時行，只會係咁switch thread行，成件事有啲on9，基本上要python做到真multi-thread只可以用C extensions。<br />\n<br />\npython官方wiki有講<br />\n<a href=\"https://wiki.python.org/moin/GlobalInterpreterLock\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fwiki.python.org%2Fmoin%2FGlobalInterpreterLock&d=EkSOzQ7ZVjnG5t8dBASUikjIoeaDRyeQRMy%2FzT52C%2Fo%3D&h=bc091c72\" data-auto-link target=\"_blank\">https://wiki.python.org/moin/GlobalInterpreterLock</a><br />\n<br />\n另外依到有另一個解釋<br />\n<a href=\"https://stackoverflow.com/questions/20939299/does-python-support-multithreading-can-it-speed-up-execution-time\" data-sr-url=\"https://r.lihkg.com/link?u=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F20939299%2Fdoes-python-support-multithreading-can-it-speed-up-execution-time&d=EkSOzQ7ZVjnG5t8dBASUikjIoeaDRyeQRMy%2FzT52C%2Fo%3D&h=21c39c06\" data-auto-link target=\"_blank\">https://stackoverflow.com/questions/20939299/does-python-support-multithreading-can-it-speed-up-execution-time</a></blockquote><br />\n<img src=\"/assets/faces/big/good.gif\" class=\"hkgmoji\" />高質"},{"pid":"99a78eef7c33bd1be4aa552a44efe859e033c1ab","tid":258998,"uid":67527,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T12:33:27.000Z","msg":"<blockquote><blockquote><blockquote>python我唔熟<br />\n不過正常socket listen時如果有incoming connection應該會return一個client object<br />\nserver要做既就係搵一條thread不斷listen+push client入條list<br />\n之後你想一個client一個thread或者第二條thread loop client list都得</blockquote><br />\n我最近寫C係用main thread不斷listen，但係有connection就直接spawn child thread，無push入queue，到client disconnect，條thread個function就會自己end。唔知咁做啱唔啱，但係work</blockquote><br />\n我印象中Apache係咁嘅做法<br />\n有幾條thread係咁loop client係Nginx做法<br />\n邊個好d唔敢講</blockquote><br />\n啱啱睇咗nginx個documentation，真係用一個module去mon一堆file descriptor，然後一個當有file descriptor有new data嘅時候，loop不斷派job比thread。<br />\nnginx用咗好多唔同syscall去做mon file descriptor嘅module，基本上有啲os specific嘅syscall會快啲嘅話，就會用嗰啲，例如linux用epoll，bsd用kqueue。<br />\n啱啱睇咗一輪，好似一般嚟講用nginx嘅implementation會scalable啲，雖然mon一堆file descriptor係有啲晒時間，但係apache(我用個方法)係好多connection嘅情況，會有好大memory pressure，而且唔夠thread嘅話會好多context switch，最後得不償失。基本上係要好多thread+memory嘅server，apache先可能有優勢(唔肯定，無testing support)，或者其實apache無咩優勢，因為就算有100條logical threads(而且好多server都無咁多threads)，要每條handle 100個request都好多context switch下。"},{"pid":"f4e3ce4973a02fab4abdfa2a02eec25db66e8aa5","tid":258998,"uid":63156,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T13:03:13.000Z","msg":"<blockquote><blockquote><blockquote><blockquote>python我唔熟<br />\n不過正常socket listen時如果有incoming connection應該會return一個client object<br />\nserver要做既就係搵一條thread不斷listen+push client入條list<br />\n之後你想一個client一個thread或者第二條thread loop client list都得</blockquote><br />\n我最近寫C係用main thread不斷listen，但係有connection就直接spawn child thread，無push入queue，到client disconnect，條thread個function就會自己end。唔知咁做啱唔啱，但係work</blockquote><br />\n我印象中Apache係咁嘅做法<br />\n有幾條thread係咁loop client係Nginx做法<br />\n邊個好d唔敢講</blockquote><br />\n啱啱睇咗nginx個documentation，真係用一個module去mon一堆file descriptor，然後一個當有file descriptor有new data嘅時候，loop不斷派job比thread。<br />\nnginx用咗好多唔同syscall去做mon file descriptor嘅module，基本上有啲os specific嘅syscall會快啲嘅話，就會用嗰啲，例如linux用epoll，bsd用kqueue。<br />\n啱啱睇咗一輪，好似一般嚟講用nginx嘅implementation會scalable啲，雖然mon一堆file descriptor係有啲晒時間，但係apache(我用個方法)係好多connection嘅情況，會有好大memory pressure，而且唔夠thread嘅話會好多context switch，最後得不償失。基本上係要好多thread+memory嘅server，apache先可能有優勢(唔肯定，無testing support)，或者其實apache無咩優勢，因為就算有100條logical threads(而且好多server都無咁多threads)，要每條handle 100個request都好多context switch下。</blockquote><br />\n新web server嘅出現好大原因係因為C10M problem(10 million concurrent connection)(其實已經唔算新)<br />\nApache咁樣開thread法 好難應付到大量request<br />\n<br />\n不過入門學client-server programming嚟講<br />\n一個client開一條新thread比較易<br />\n用Nginx做法好多synchronization問題 新手唔易搞"},{"pid":"f70a4e069ebf462bf16bdcdcc0d3b4d7ae204d05","tid":258998,"uid":67527,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-27T13:31:50.000Z","msg":"<blockquote><blockquote><blockquote><blockquote><blockquote>python我唔熟<br />\n不過正常socket listen時如果有incoming connection應該會return一個client object<br />\nserver要做既就係搵一條thread不斷listen+push client入條list<br />\n之後你想一個client一個thread或者第二條thread loop client list都得</blockquote><br />\n我最近寫C係用main thread不斷listen，但係有connection就直接spawn child thread，無push入queue，到client disconnect，條thread個function就會自己end。唔知咁做啱唔啱，但係work</blockquote><br />\n我印象中Apache係咁嘅做法<br />\n有幾條thread係咁loop client係Nginx做法<br />\n邊個好d唔敢講</blockquote><br />\n啱啱睇咗nginx個documentation，真係用一個module去mon一堆file descriptor，然後一個當有file descriptor有new data嘅時候，loop不斷派job比thread。<br />\nnginx用咗好多唔同syscall去做mon file descriptor嘅module，基本上有啲os specific嘅syscall會快啲嘅話，就會用嗰啲，例如linux用epoll，bsd用kqueue。<br />\n啱啱睇咗一輪，好似一般嚟講用nginx嘅implementation會scalable啲，雖然mon一堆file descriptor係有啲晒時間，但係apache(我用個方法)係好多connection嘅情況，會有好大memory pressure，而且唔夠thread嘅話會好多context switch，最後得不償失。基本上係要好多thread+memory嘅server，apache先可能有優勢(唔肯定，無testing support)，或者其實apache無咩優勢，因為就算有100條logical threads(而且好多server都無咁多threads)，要每條handle 100個request都好多context switch下。</blockquote><br />\n新web server嘅出現好大原因係因為C10M problem(10 million concurrent connection)(其實已經唔算新)<br />\nApache咁樣開thread法 好難應付到大量request<br />\n<br />\n不過入門學client-server programming嚟講<br />\n一個client開一條新thread比較易<br />\n用Nginx做法好多synchronization問題 新手唔易搞</blockquote><br />\n其實之前(5-6都幾年前)未學到咁深嘅時候已經聽過好多apache問題，所以當時已經轉nginx，到依家都唔再用apache<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /><br />\n去到依家係大學讀到OS先明究竟係咩一回事，點解Apache慢"},{"pid":"c10f2fa5d35cb5762a93e2896ac3c3f2ccc63b35","tid":258998,"uid":13194,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-28T12:31:10.000Z","msg":"多謝大家解答<br />\n問題已經解決咗<br />\n連登有愛<img src=\"/assets/faces/normal/cry.gif\" class=\"hkgmoji\" /><br />\n<br />\nbtw之後你哋講個啲野真係唔係好明<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" />"},{"pid":"961d1199dca494b26a389fc5c56488490e553c40","tid":258998,"uid":67527,"like":0,"dislike":0,"score":0,"citedBy":0,"replyTime":"2017-05-29T00:32:14.000Z","msg":"<blockquote>多謝大家解答<br />\n問題已經解決咗<br />\n連登有愛<img src=\"/assets/faces/normal/cry.gif\" class=\"hkgmoji\" /><br />\n<br />\nbtw之後你哋講個啲野真係唔係好明<img src=\"/assets/faces/normal/sosad.gif\" class=\"hkgmoji\" /></blockquote><br />\n其實用python寫隨時要用subprocess，先可以真正做到multi process，用嘅memory仲多過開thread，你最好點寫？"}]}